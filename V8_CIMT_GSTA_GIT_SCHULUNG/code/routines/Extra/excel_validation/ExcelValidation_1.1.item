package routines;

import java.text.ParseException;
import java.util.regex.Pattern;
import java.text.SimpleDateFormat;
import java.util.Date;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ExcelValidation {

	public static boolean check_isrc(String isrc_string) {
    	
    	//Check if the given String is not empty or null
    	if (isrc_string == null || isrc_string.length() < 1) {
    		//System.out.println("The ISRC Value: " + isrc_string + " is null or empty");
    		return false;
    	}
    	
    	//When the string is not empty, remove '-' and ' ' of the String
    	if (isrc_string.contains("-") || isrc_string.contains(" ")) {
    		isrc_string = isrc_string.replace(" ", "");
    		isrc_string = isrc_string.replace("-", "");
    	}
    	
    	//Check if given isrc number's length is 12 characters
    /*	if (isrc_string.length() != 12) {
    		System.out.println("The ISRC Value: " + isrc_string + " does not contain 12 characters in total, but: " + isrc_string.length());
    		return false;
    	}*/
/*    	
    	//Check if the last 6 characters of ISRC are numbers
    	if (!NumberUtil.isNumber(isrc_string.substring(5, 12))) {
    	//	System.out.println("The ISRC Value: " + isrc_string + " contains not only numbers in the 7 last characters");
    		return false;
    	}*/
    	
    	//Check if the convention of ISRC like https://de.wikipedia.org/wiki/International_Standard_Recording_Code

         //[a-z,A-Z]{2}[a-z,A-Z,0-9]{3}[0-9]{7}
    	
    	if (!Pattern.compile("^[a-z,A-Z]{2}[a-z,A-Z,0-9]{3}[0-9]{7}$").matcher(isrc_string).find()) {
    		//System.out.println("The ISRC Value: " + isrc_string + " does not match ISRC conventions");
    		return false;
    	}
    	return true;
	}    
    
    public static boolean check_ean(String ean_string) {
    	
    	int evens = 0; //initialize evens variable
		int odds = 0; //initialize odds variable
		int checkSum = 0; //initialize the checkSum
    	
    	//Check if the given String is not empty or null
    	if (ean_string == null || ean_string.length() < 1){
    		System.out.println("The EAN number: " + ean_string + " is null or empty");
    		return false;
    	}
    	
    	//When the string is not empty, remove '-' and ' ' of the String
    	if (ean_string.contains("-") || ean_string.contains(" ")){
    		ean_string.replace(" ", "");
    		ean_string.replace("-", "");
    	}
    	
    	//Check if given ean number's length is 13 digits
    	if (ean_string.length() != 13){
    		System.out.println("The EAN number: " + ean_string + " does not contain 13 digits in total");
    		return false;
    	}
    	
    	//Check if given ean number contains no chars, but numbers
    	if (NumberUtil.isNumber(ean_string) == false){
    		System.out.println("The EAN number: " + ean_string + " contains not only numerical values");
    		return false;
    	}
    	
		  

		for (int i = 0; i < 12; i++) {
			//Check if number is odd or even
			if ((i + 1) % 2 == 0) { // check that the character at position "i" is divisible by 2 which means it's even --> first character must be odd
				evens = evens + Character.getNumericValue(ean_string.charAt(i));// then add it to the evens
			}
			
			else{
				odds = odds + Character.getNumericValue(ean_string.charAt(i)); // else add it to the odds
			}
		}
		
		evens = evens * 3; //multiply odds by three
		
		int total = odds + evens; //sum odds and evens
		
		if (total % 10 == 0){ //if total is divisible by ten, special case
			checkSum = 0;//checksum is zero
			}
		else{ //total is not divisible by ten
			checkSum = (-total % 10); //subtract the ones digit from 10 to find the checksum
			if (checkSum < 0){ //special case
				checkSum = checkSum + 10;
			}
		}
		
		//Compare calculated checksum with the check digit
		if(checkSum == Character.getNumericValue(ean_string.charAt(12))){
			return true;
		}
		//else
        return false;
    }
    
    /**
     * durationNAVI: Check the insert duration and return a Text.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} ExcelValidation
     * 
     * {param} string("69:61:45") input: The string is testet false because the minute field is 61.
     * 
     * {example} durationNAVI("69:61:45") # Werte sind nicht korrekt !.
     */
	public static boolean durationNAVI(String text) {
		if (text == null) {
			return false;
		}
		int countColons = countColons(text);
		if (countColons == 1) {
			try {
				TalendDate.parseDate("mm:ss", text);
				return true;
			} catch (Exception e) {
				return false;
			}
		} else if (countColons == 2) {
			try {
				TalendDate.parseDate("HH:mm:ss", text);
				return true;
			} catch (Exception e) {
				return false;
			}
		} else {
			return false;
		}
	}
	
    /**
     * durationNAVI: Check the insert duration and return a Text.
     * 
     * 
     * {talendTypes} String
     * 
     * {Category} ExcelValidation
     * 
     * {param} string("01:23:45") input: The string is testet false because the minute field is 61.
     * 
     * {example} getDurationNAVI("01:23:45") # 
     */
	public static Long getDurationNAVI(String text) {
		if (text == null) {
			return null;
		}
		int countColons = countColons(text);
		if (countColons == 1) {
			try {
				return GenericDateUtil.parseDuration(text, "mm:ss").getTime();
			} catch (Exception e) {
				return null;
			}
		} else if (countColons == 2) {
			try {
				return GenericDateUtil.parseDuration(text, "HH:mm:ss").getTime();
			} catch (Exception e) {
				return null;
			}
		} else {
			return null;
		}
	}

	private static int countColons(String text) {
		int count = 0;
		for (int i = 0; i < text.length(); i++) {
			char c = text.charAt(i);
			if (c == ':') {
				count++;
			}
		}
		return count;
	}
	
	/**
     * dateCheckNAVI: Extend the method isDate. 
     * 
     * {talendTypes} String
     * 
     * {Category} ExcelValidation
     * 
     * {param} string("TT.MM.JJJJ") input: The string is testet false because the minute field is 61.
     * 
     * {param} String("JJJJ") pattern
     * 
     *  {example} dateCheckNAVI("2016", "Wert ist OK!", "JJJJ") # Wert ist OK!.
     */
	public static String dateCheckNAVI(String text, String returnText, String pattern) {
		String messageText = "";
		if (TalendDate.isDate(text, pattern) == false) {
			messageText = returnText;
		}
		return messageText;
	}
	
	

	
	
	/**
     * dateCheckRegexNAVI: Check the given value is a valid date for NAVI. 
     * compare two date
     *
     * @param fieldValue (field Value)
     * @param isShort (short or long dateformat)
     * @return the given date is valid for NAVI
     *
     * {talendTypes} String
     *
     * {Category} ExcelValidation
     *
     * {param} String(myDate) fieldValue : the first 
     *
     * {param} boolean(true) true/false : the second 
     *
     * {examples}
     *
     * ->> dateCheckRegexNAVI(15.09.2015, false) return true
     * 
     * ->> dateCheckRegexNAVI(2015, false) return false
     * 
     * ->> dateCheckRegexNAVI(2015, true) return true
     *       
     */
	public static boolean dateCheckRegexNAVI(String fieldValue, boolean isShort) {
		String regexShort = "^(18|19|20)[0-9]{2}$";
		String regexLong = "^(0[1-9]|[12][0-9]|3[01])[.](0[1-9]|1[012])[.](18|19|20)[0-9]{2}$";
		boolean returnValue;
		
		if (isShort && fieldValue.matches(regexShort)) {
			returnValue = true;
		} else if (isShort == false && fieldValue.matches(regexLong)) {
			returnValue = true;
		} else {
			returnValue = false;
		}
		
		return returnValue;
	}
	
	public static boolean genreCheck(String genre){
		String[] arr = { "LIBRARY", "JAZZ", "BIGBAND", "CHAMBER", "CROSSOVER", "CLASSICAL", "MUSICAL", "SYMPHONY","POPROCK", "OPERA" };
		boolean returnValue = false;
		
		for (String element : arr) {
			if (element.equalsIgnoreCase(genre)) {
				returnValue=  true;
			}
		}
		
		return returnValue;
	}
	
	
	public static boolean komponistCheck(String genre) {
		String[] arr = { "OPERA", "SYMPHONY", "CLASSICAL", "CHAMBER", "MUSICAL", "CROSSOVER" };
		boolean returnValue = false;
		
		for (String element : arr) {
			if (element.equalsIgnoreCase(genre)) {
				returnValue=  true;
			}
		}
		
		return returnValue;
	}
	
	/**
	 * Diese Methode ist nötig um die unterschiedlichen Datumsformate zu prüfen
	 * 
	 * @param fieldValue Datumswert (String) '20110113000000', 12.05.2015, 2015
	 * @return Datum lang (dd.MM.yyyy) Datum kurz (yyyy)
	 */
	public static String dateConvertNAVI(String fieldValue) {
		String dateField = fieldValue;
		String result = "";

		// Wert y.yyy behandeln
		if (dateField.length() <= 5) {
			dateField = dateField.replace(".", "");
		}

		// Prüfen, ob es sich um ein Datum im Format 'yyyy' oder 'dd.MM.yyyy'
		// handelt
		if (dateCheckRegexNAVI(dateField, true)) {
			result = dateField;
		} else if (dateCheckRegexNAVI(dateField, false)) {
			result = dateField;
		} else if (TalendDate.isDate(dateField, "yyyyMMddHHmmss")) {
				
			result = dateField.substring(6, 8) + "." + dateField.substring(4, 6) + "." + dateField.substring(0, 4);

			//System.out.println(result);
		} 
		return result;
	}
	
	
	/**
     * dateCompareNAVI: Extend the method isDate. 
     * compare two date
     *
     * @param date1 (first date)
     * @param date2 (second date)
     * @param pattern (compare specified part, example: "yyyy-MM-dd")
     * @return true
     *
     * {talendTypes} Boolean
     *
     * {Category} ExcelValidation
     *
     * {param} String(myDate1) date1 : the first date to compare
     *
     * {param} String(myDate2) date2 : the second date to compare
     *
     * {examples} date2IsBeforeDate1(myDate1, myDate2)
	 * @throws ParseException 
     */
	public static boolean date2IsBeforeDate1(String stringDate1, String stringDate2) throws ParseException {
		if (StringUtil.isEmpty(stringDate1) || StringUtil.isEmpty(stringDate2)) {
			return false;
		}
		Date date1 = GenericDateUtil.parseDate(stringDate1, "dd.MM.yyyy");
		Date date2 = GenericDateUtil.parseDate(stringDate2, "dd.MM.yyyy");
		return date2IsBeforeDate1(date1, date2);		
	}
	
	/**
     * dateCompareNAVI: Extend the method isDate. 
     * compare two date
     *
     * @param date1 (first date)
     * @param date2 (second date)
     * @param pattern (compare specified part, example: "yyyy-MM-dd")
     * @return the result wheather two date is the same, if first one less than second one return number -1, equlas
     * return number 0, bigger than return number 1. (can compare partly)
     *
     * {talendTypes} Boolean
     *
     * {Category} ExcelValidation
     *
     * {param} String(myDate1) date1 : the first date to compare
     *
     * {param} Date(myDate2) date2 : the second date to compare
     *
     * {examples} date2IsBeforeDate1(myDate1, myDate2)
	 * @throws ParseException 
     */
	public static boolean date2IsBeforeDate1(String stringDate1, Date date2) throws ParseException {
		if (StringUtil.isEmpty(stringDate1) || date2 == null) {
			return false;
		}
		Date date1 = GenericDateUtil.parseDate(stringDate1, "dd.MM.yyyy");
		return date2IsBeforeDate1(date1, date2);
	}
	
	/**
     * dateCompareNAVI: Extend the method isDate. 
     * compare two date
     *
     * @param date1 (first date)
     * @param date2 (second date)
     * @param pattern (compare specified part, example: "yyyy-MM-dd")
     * @return the result wheather two date is the same, if first one less than second one return number -1, equlas
     * return number 0, bigger than return number 1. (can compare partly)
     *
     * {talendTypes} Boolean
     *
     * {Category} ExcelValidation
     *
     * {param} Date(date1) date1 : the first date to compare
     *
     * {param} Date(date2) date2 : the second date to compare
     *
     * {examples} date2IsBeforeDate1(date1, date2)
     *
	 * @throws ParseException 
     */
	public static boolean date2IsBeforeDate1(Date date1, Date date2) throws ParseException {
		if (date1 == null || date2 == null) {
			return false;
		}
		return date2.before(date1);
	}
	
	/**
     * MLCDateConvert: Converts a variable Date String to a Date object. 
     * 
     * {talendTypes} Date
     * 
     * {Category} ExcelValidation
     * 
     * {param} string(test) input: The string is given and converted to a Date
     * 
     * 
     * {example} MLCDateConvert(test) # Date: 2016-12-01 00:00:00
     */
	public static Date MLCDateConvert(String inputDate) {
		if (StringUtil.isEmpty(inputDate)){
			return null;
		}
		
		else if (inputDate.length() < 4){
			return null;
		}
		
		else if (inputDate.length() == 4){
			Date returnDate = TalendDate.parseDate("yyyy", inputDate);
			return returnDate;
		}
		
		else if (inputDate.length() == 7){
			Date returnDate = TalendDate.parseDate("yyyy-MM", inputDate);
			return returnDate;
		}
		
		else if (inputDate.length() == 10){
			Date returnDate = TalendDate.parseDate("yyyy-MM-dd", inputDate);
			return returnDate;
		}
		
		else {
			return null;
		}
	}
	
	private static final Date FIRST_VALID_DATE = TimestampUtil.getIntAsDate(18000101);
	
	/**
     * Checks if a Date is within a valid date range 
     * 
     * {talendTypes} boolean
     * 
     * {Category} ExcelValidation
     * 
     * {param} Date(test) input
     * 
     * {example} isValidDate(Date test) # Date: 2016-12-01 00:00:00
     */
	public static boolean isValidDate(Date test) {
		return TimestampUtil.between(test, FIRST_VALID_DATE, TimestampUtil.getSCDEndDate());
	}
	
	
}
