package routines;

import java.util.StringTokenizer;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class WhereUtil {

    /**
     * helloExample: not return value, only print "hello" + message.
     * 
     * 
     * {talendTypes} WhereForMultiGet
     * 
     * {Category} User Defined
     * 
     * {param} string("world") input: The string need to be printed.
     * 
     * {example} helloExemple("world") # hello world !.
     * @throws Exception 
     */
    public static WhereForMultiGet getSimpleWhere(String field, Long value, String values, Boolean isListFromURL, int limit) throws Exception {
    	
    	//init WhereForMultiGet
    	WhereForMultiGet whereForMultiGet = new WhereForMultiGet();
    	
    	// init variables
    	String whereClause = "";
    	String andClause = "";

    	// normal Get: use businessobject_id
    	if(NumberUtil.getNullSaveLong(value) > 0) {
    		
    		whereForMultiGet.setWhere( "where " + field + " = " + value );
    		
    	// multi-get: use listBusinessobjectIds	
    	} else if(!StringUtil.isEmpty(values)) {
    		
    		String[] temp = values.split(",");
    		// limit ids: only from URL
			if(isListFromURL && temp.length > limit){

				throw new Exception("Bad Request, max. " + limit + " ids are allowed");
			}
			// build in clause:
		    StringBuilder stringBuilder = new StringBuilder(" in(");
		    for (String item : temp) {
		    	if (item.length() > 0) {
		    		stringBuilder.append("'" + item + "'");
		            stringBuilder.append(",");
		        }
		   	}
		    stringBuilder.deleteCharAt((stringBuilder.length() - 1));
		    stringBuilder.append(")");
		    
		    whereForMultiGet.setWhere( "where " + field + stringBuilder.toString() );
		    whereForMultiGet.setIsArray(true);
    		
    	}else{

    		throw new Exception("Bad Request, either the object ID or the parameter ids is invalid");
    	}   	
    	
    	
    	return whereForMultiGet;
    }

	public static WhereForMultiGet getWhereWithAndClause(String field, Long value, String values, Boolean allStatus, Boolean isListFromURL, int limit) throws Exception {
	    	
	    	//init WhereForMultiGet
	    	WhereForMultiGet whereForMultiGet = new WhereForMultiGet();
	    	
	    	// init variables
	    	String whereClause = "";
	    	String andClause = "";
	
	    	// normal Get: use businessobject_id
	    	if(NumberUtil.getNullSaveLong(value) > 0) {
	    		
	    		whereForMultiGet.setWhere( "where " + field + " = " + value );
	    	// multi-get: use listBusinessobjectIds	
	    	} else if(!StringUtil.isEmpty(values)) {
	    		
	    		String[] temp = values.split(",");
	    		// limit ids: only from URL
				if(isListFromURL && temp.length > limit){

					throw new Exception("Bad Request, max. " + limit + " ids are allowed");
				}
				// build in clause:
			    StringBuilder stringBuilder = new StringBuilder(" in(");
			    for (String item : temp) {
			    	if (item.length() > 0) {
			        	stringBuilder.append("'" + item + "'");
			            stringBuilder.append(",");
			        }
			   	}
			    stringBuilder.deleteCharAt((stringBuilder.length() - 1));
			    stringBuilder.append(")");
			    
			    whereForMultiGet.setWhere( "where " + field + stringBuilder.toString() );
			    whereForMultiGet.setIsArray(true);
			    
	    	}else{
	
	    		throw new Exception("Bad Request, either the object ID or the parameter ids is invalid");
	    	}
	    	
	    	// add andClause
	    	if(allStatus == null || allStatus == false){
	    		whereForMultiGet.setAndClause( " and (data_status_id != b17_core.catalog_id_by_sysname('deleted','data_status') or data_status_id is null)" );
	    	}else{
	    		whereForMultiGet.setAndClause("");
	    	}

	    	return whereForMultiGet;
	    }
	}
