package routines;

import javax.xml.bind.DatatypeConverter;
import java.security.MessageDigest;
import java.security.SecureRandom;
import java.util.Date;
import java.text.SimpleDateFormat;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class WSSEHeaderUtil {
	
	private static final String authorization = "WSSE profile=\"UsernameToken\"";
	private String xwsse;
	private String user;
	private String apiKey;
	
	public WSSEHeaderUtil(String user, String apiKey){
		this.user = user;
		this.apiKey = apiKey;		
	}

    private String buildNonce(){
    	
        SecureRandom random = new SecureRandom();
        
        byte bytes[] = new byte[16];  // 16 : from Nonce formula
        random.nextBytes(bytes);
        
        return DatatypeConverter.printBase64Binary(bytes);
    }

    private String buildCreationDate(){
    	
    	SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX");
        return simpleDateFormat.format(new Date()) + ":00";
    }
    
    private String buildDigest(String nonce, String created, String apiKey) throws Exception {

        // Ensure SHA-1 algorithm is supported
        MessageDigest md = MessageDigest.getInstance("SHA-1");

        // Decode the incoming Base64 encoded nonce
        byte[] nonceBytes = DatatypeConverter.parseBase64Binary(nonce);

        // Get the timestamp in bytes
        byte[] createdBytes = created.getBytes("utf-8");

        // Get the password in bytes
        byte[] apiKeyBytes = apiKey.getBytes("utf-8");

        // Update the digest with the byte arrays and then encode in base64
        // Hashing formula is: Base64( SHA-1( nonce + created + password ))
        md.update(nonceBytes);
        md.update(createdBytes);
        md.update(apiKeyBytes);

        return DatatypeConverter.printBase64Binary(md.digest());
    }
    
    public String getXwsse(){
    	
    	String nonce = buildNonce();
    	String strCreated = buildCreationDate();
    	
    	try{
    		
    		String passwordDigest = buildDigest(nonce,strCreated,apiKey);
    	
    		xwsse = "UsernameToken Username=\"" + user + "\", PasswordDigest=\"" + passwordDigest + "\", Nonce=\"" + nonce + "\", Created=\"" + strCreated + "\"";
    	
    		return xwsse;
    	
    	}catch(Exception ex){
    		
    		ex.printStackTrace();
    		return null;
    	}
    }
    
    public String getAuthorization(){
    	return authorization; 
    }
}
