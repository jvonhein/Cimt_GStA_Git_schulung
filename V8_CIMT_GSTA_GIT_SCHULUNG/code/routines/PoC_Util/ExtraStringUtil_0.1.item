package routines;

/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */
public class ExtraStringUtil {

	/**
	 * limit a string to the given length, can handle null
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} User Defined
	 * 
	 * {param} string("Hello") input: The string need to be limited. {param}
	 * int(4) input: The limit where to cut.
	 * 
	 * {example} StringLimiter("Hello", 4) returns "Hell".
	 */
	public static String StringLimiter(String in, int limit) {
		if (in == null || limit <= 0 || in.length() <= limit)
			return in;
		return in.substring(0, limit);
	}

	/**
	 * count Alphanumeric chars in the string. null or empty results in 0
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} User Defined
	 * 
	 * {param} string("Hello,- ") input: The string to be counted.
	 * 
	 * {example} countAlphaNumChars("Hello,- ") returns 5.
	 */
	public static int countAlphaNumChars(String in) {
		if (in == null || in.length() == 0)
			return 0;

		int count = 0;
		for (char ch : in.toCharArray())
			if (Character.isLetterOrDigit(ch))
				count++;

		return count;
	}

	/**
	 * trims and cleans the given string. null as input results in null,
	 * empty-string results in null
	 * 
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} User Defined
	 * 
	 * {param} string(" Hello ") input: The string to be cleaned.
	 * 
	 * {example} countAlphaNumChars(" Hello ") returns "Hello".
	 */
	public static String trimClean(String in) {
		if (in == null || in.length() == 0)
			return null;

		String work = in.trim();

		if (work.length() == 0)
			return null;

		return work;
	}

	/**
	 * count Alphanumeric chars in the string and compare it against a desired
	 * amount of chars. The result is a quality-indicator between 0 and 9 where
	 * 9 is best quality which means that as much as wanted characters exists.
	 * 
	 * {talendTypes} String
	 * 
	 * {Category} User Defined
	 * 
	 * {param} string("Hello,- ") input: The string to be counted. {param}
	 * int(10) input: how many characters are enough for full quality
	 * 
	 * {example} stringQuality("Hello,- ", 10) returns 4.
	 */
	public static int stringQuality(String in, int enough) {
		int x = countAlphaNumChars(in);

		if (x > enough)
			x = enough;

		float d = ((float) x / (float) enough) * 9.0f;

		return (int) d;
	}

	/**
	 * Converts a string to int if some number is contained, returns 0 if
	 * nothing other possible
	 * 
	 * {talendTypes} int
	 * 
	 * {Category} User Defined
	 * 
	 * {param} string("12345") input: The string to be converted.
	 * 
	 * {example} stringToInt("123") returns 123.
	 */
	public static int stringToInt(String in) {
		if (in == null)
			return 0;

		try {
			final StringBuilder sb = new StringBuilder(in.length());
			for (int i = 0; i < in.length(); i++) {
				final char c = in.charAt(i);
				if (c > 47 && c < 58) {
					sb.append(c);
				}
			}
			String tmp = sb.toString();

			if (tmp.length() > 0)
				return Integer.parseInt(tmp);
		} catch (Exception e) {
			return 0;
		}
		return 0;
	}
	
	
	/**
     * Determines whether the expression is a numeric.
     * 
     * {talendTypes} boolean | Boolean
     * 
     * {Category} StringHandling
     * 
     * {param} string("123") input: String need to be known whether is an numeric or not.
     * 
     * {example} IS_NUMBER("123") # true
     * {example} IS_NUMBER("1x3") # false
     */
    public static boolean IS_NUMBER(String input) {
        if (input != null) {
            char[] val = input.toCharArray();

            for (int i = 0; i < val.length; i++) {
                if (!Character.isDigit(val[i])) {
                    return false;
                }
            }

            return true;
        }
        return false;
    }
}